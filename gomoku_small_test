def game_menu():
    """Displays the game menu.

    This function does not accept any parameters and does not return any value.
    """

    print("\n -----------Welcome to the game of Go! ------------------\n")
    print("Please select an option from the menu: \n")
    print("1. Start a Game")
    print("2. Print the Board")
    print("3. Place a Stone")
    print("4. Reset the Game")
    print("5. Exit")

    choice = input("Enter your choice: ")

    while choice not in ["1", "2", "3", "4", "5"]:
        print("Invalid choice. Please enter a number from 1 to 5.")
        choice = input("Enter your choice: ")

    return choice


choice = game_menu()

if choice == "1":
    print("Start a new game.")
    size = int(input("Enter Board Game Size 9, 13, 15: "))

    def create_board():
        return [[" " for x in range(size)] for x in range(size)]

    def print_board(board):
        # print("   A   B   C   D   E   F   G   H   I")
        for i in range(size):
            print("  " + chr(i + ord("A")), end=" ")
        print("\n +" + "---+" * size)
        for i, row in enumerate(board):
            print(" | " + " | ".join(row) + " |" + f"{i}")
            print(" +" + "---+" * size)
        for i in range(1, size + 1):
            print(" ", i, end=" ")
        print("\n")
        return print_board(size)

elif choice == "2":
    print("Print the board.")
elif choice == "3":
    print("Place a stone.")
elif choice == "4":
    print("Reset the game.")
elif choice == "5":
    print("Exit the game.")





game_menu
#=======================
def game_menu():
  print("\n -----------Welcome to the game of Go! ------------------\n")
  print("Please select an option from the menu: \n")
  print("1. Start a Game")
  print("2. Print the Board")
  print("3. Place a Stone")
  print("4. Reset the Game")
  print("5. Exit")

  choice = input("Enter your choice: ")

  while choice not in ["1", "2", "3", "4", "5"]:
    print("Invalid choice. Please enter a number from 1 to 5.")
    choice = input("Enter your choice: ")

  return choice

choice = game_menu()

if choice == "1":
    print("Start a new game.")
elif choice == "2":
    print("Print the board.")
elif choice == "3":
    print("Place a stone.")
elif choice == "4":
    print("Reset the game.")
elif choice == "5":
    print("Exit the game.")
  
#============================




#create_board(size)
#================================

def create_board(size):
  board = [[0 for _ in range(size)] for _ in range(size)]

  for i in range(size):
    for j in range(size):
      board[i][j] = 0

  return board
board = create_board(9)
print(board)

#=======================

def create_board(size):
 
  board = []
  for i in range(size):
    row = []
    for j in range(size):
      row.append(0)
    board.append(row)

  # The value 0 will be used to represent an unoccupied intersection.

  return board
board = create_board(9)
print(board)


#=========================
def create_board(size):
 
  board = [[0 for _ in range(size)] for _ in range(size)]

  # Initialize all intersections to be unoccupied.
  for i in range(size):
    for j in range(size):
      board[i][j] = 0

  return board

board = create_board(9)
print(board)
#==============================
# is_occupied
#===================

def is_occupied(board, x, y):
  if board[x][y] != 0:
    return True
  else:
    return False


board = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]

print(is_occupied(board, 0, 0))  # True
print(is_occupied(board, 1, 1))  # True
print(is_occupied(board, 2, 2))  # False

#========================
# place_on_board
#========================

def place_on_board(board, stone, position):
  row, col = position

  if not is_valid_position(board, row, col):
    return False

  if is_occupied(board, row, col):
    return False

  board[row][col] = stone

  return True

board = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]

print(place_on_board(board, "●", (0, 0)))  # True
print(place_on_board(board, "○", (0, 0)))  # False
print(place_on_board(board, "●", (1, 1)))  # True
#=======================================

def create_board(size):
    # Create a list of lists to represent the board
    board = [[' ' for _ in range(size)] for _ in range(size)]
    return board

def place_on_board(board, stone, position):
    x, y = position
    if x.isdigit() and y.isalpha():
        x = int(x)
        y = ord(y.upper()) - ord('A')
        if 0 <= x < len(board) and 0 <= y < len(board[0]) and not is_occupied(board, x, y):
            board[x][y] = stone
            return True
    return False

# Example usage:
size = 9
board = create_board(size)

# Place a stone "X" at position (2, 3)
position = ("2", "C")
placed = place_on_board(board, "X", position)
print("Stone placed:", placed)

# Attempt to place a stone "O" at an invalid position
position = ("10", "B")
placed = place_on_board(board, "O", position)
print("Stone placed:", placed)

# Print the updated board
for row in board:
    print(' | '.join(row))
    print('-' * (4 * size - 1))
#=====================================================

from random import random

player_x = "X"
player_o = "O"


def game_menu():
    print("\n -----------Welcome to the game of Gomoku! ------------------\n")
    print("Please select an option from the menu: \n")
    print("1. Start a Game")
    print("2. Print the Board")
    print("3. Place a Stone")
    print("4. Reset the Game")
    print("5. Exit")

    choice = input("Enter your choice: ")

    while choice not in ["1", "2", "3", "4", "5"]:
        print("Invalid choice. Please enter a number from 1 to 5.")
        choice = input("Enter your choice: ")

    return choice


choice = game_menu()
if choice == "1":
    print("Start a new game.")
    size = int(input("Enter Gomoku Board Game Size 9, 13, 15: "))
    choice_mode = input("Enter mode (man or com): ")

    if choice_mode.lower() not in ["man", "com"]:
        print("Invalid mode. Please enter man or com:")

game_menu()

if choice == "2":
    print("Print the board.")
    size = int(input("Enter Gomoku Board Game Size 9, 13, 15: "))


def create_board():
    return [["-" for x in range(size)] for x in range(size)]


def print_board(board):
    # print("   A   B   C   D   E   F   G   H   I")
    for i in range(size):
        print("  " + chr(i + ord("A")), end=" ")
    print("\n +" + "---+" * size)
    for i, row in enumerate(board):
        print(" | " + " | ".join(row) + " |" + f"{i}")
        print(" +" + "---+" * size)
    for i in range(1, size + 1):
        print(" ", i, end=" ")
    print("\n")


def is_occupied(board):
    for row in board:
        if "-" in row:
            return False
    return True


def play_game():
    while True:
        board = create_board()
        player = player_x

        while True:
            print_board(board)
            print(f"Player {player}'s turn:")

            # Get user input for the row
            row = int(input("Enter row (0-{}): ".format(size - 1)))
            if row < 0 or row >= size:
                print("Invalid row input. Enter row (0-{}): ".format(size - 1))

            # Get user input for the column
            col = int(input("Enter column (0-{}): ".format(size - 1)))
            if col < 0 or col >= size:
                print("Invalid column input. Enter column (0-{}): ".format(size - 1))

            if board[row][col] == "-":
                board[row][col] = player
            else:
                print("Invalid move. That cell is already occupied.")
                continue

            if check_winner(board, player):
                print_board(board)
                print(f"Player {player} wins!")
                break

            if is_occupied(board):
                print_board(board)
                print("It's a draw!")
                break

            player = player_o if player == player_x else player_x

        play_again = input("Do you want to play again? (yes/no): ")
        if play_again.lower() != "yes":
            print("Thanks for playing!")
            break


if choice == "4":
    print("Game reset.")
game_menu()

if choice == "5":
    print("Exiting the program.")


def check_winner(board, player):
    for row in range(size):
        for col in range(size):
            if board[row][col] == player:
                # Check horizontally
                if col <= size - 5 and all(
                    board[row][col + i] == player for i in range(5)
                ):
                    return True

                # Check vertically
                if row <= size - 5 and all(
                    board[row + i][col] == player for i in range(5)
                ):
                    return True

                # Check diagonally (top-left to bottom-right)
                if (
                    row <= size - 5
                    and col <= size - 5
                    and all(board[row + i][col + i] == player for i in range(5))
                ):
                    return True

                # Check diagonally (bottom-left to top-right)
                if (
                    row >= 4
                    and col <= size - 5
                    and all(board[row - i][col + i] == player for i in range(5))
                ):
                    return True

    return False


# Start the game
play_game()
#=============================


